package AssuntosKT.RECE.incremento


class Contador1(val cliente: String) {
    init {
        // println("cliente criado: ${quantidade++ }")//


        quantidade++ // sempre que criar um novo cliente, incrementa

    }

    companion object {
        var quantidade = 0
        fun contador2(cliente: String): Contador1 = Contador1(cliente)
        // fun√ß√£o de express√£o √∫nica ou em ingl√™s single-expression function
        //N√£o precisa de return porque o valor da express√£o depois do = j√° √© o retorno...
    }
}

fun main() {

    val cont0 = Contador1.contador2("Maria")
    val cont1 = Contador1.contador2("Jo√£o")
    val cont2 = Contador1.contador2("Ana")
    println("Cliente: ${cont0.cliente}")
    println("Cliente: ${cont1.cliente}")
    println("Cliente: ${cont2.cliente}")
    println("Total de clientes cadastrados: ${Contador1.quantidade}")
}

/**
 * ‚úÖ O que √© o init em Kotlin?
 * O bloco init em uma classe Kotlin √© executado automaticamente toda vez que voc√™ cria uma nova inst√¢ncia (objeto) da classe.
 *
 * Ou seja:
 *
 * Voc√™ chama Contadorr("Maria")
 *
 * O construtor roda
 *
 * E o que estiver dentro do init ser√° executado imediatamente ap√≥s o construtor.
 *
 * üß† Por que usamos o init no seu caso?
 * Voc√™ quer fazer o seguinte:
 *
 * "Toda vez que algu√©m usar a fun√ß√£o contador(cliente), eu quero contar quantos clientes j√° foram criados."
 *
 * A vari√°vel quantidade est√° no companion object, ou seja, ela √© compartilhada por todos os objetos da classe.
 *
 * E o init √© a melhor forma de dizer:
 *
 * "Sempre que qualquer novo cliente for criado, aumente esse n√∫mero em 1."
 *
 *
 */