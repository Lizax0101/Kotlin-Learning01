// Superclasse Produto
open class Produt(val nome: String, val preco: Double) {
    open fun mostrarInformacao() {
        println("Produto: $nome - Pre√ßo: R$ $preco")
    }
}
// Lista de compras
class ListaCompras {

    val listaProdutos = mutableListOf<Produt>()

    fun adicionar(produto: Produt) {
        listaProdutos.add(produto)
        println("${produto.nome}, adicionado √† lista.")
    }

    fun mostrarLista() {
        println("\nProdutos na sua lista de compras:")
        listaProdutos.forEach { it.mostrarInformacao() }// para cada item da lista it(obj).mostrarInformacao() mostra nome do produto e pre√ßo
    }

    fun calcularCompras(): Double {//retorna esse total.
        return listaProdutos.sumOf { it.preco }//  percorre a lista e soma os pre√ßos.
    }
}

fun main() {
    val lista = ListaCompras()
    println("SUCOS DISPONIVEIS\n")
    lista.adicionar(Produt("Suco de Tamarindo", 9.00)) // polimorfismo
    lista.adicionar(Produt("Suco de Graviola", 10.00)) // polimorfismo
    lista.adicionar(Produt("√Ågua de Coco", 10.00))

    println("\nConsulte seus produtos aqui:")
    lista.mostrarLista()

    println("\nTotal da compra: R$ ${lista.calcularCompras()}")
}

/**
 * metodo calcularCompras
 *
 *
 * fun calcularCompras(): Double {
 *       ->  return listaProdutos.sumOf { it.preco } <-
 *     }
 *
 * "Retorne a soma dos valores da propriedade preco de todos os itens da lista listaProdutos."
 *
 * Este m√©todo percorre todos os objetos da lista listaProdutos (cada objeto sendo um produto, por exemplo), e soma o valor da propriedade preco de cada um.
 * O m√©todo sumOf √© uma fun√ß√£o Kotlin muito pr√°tica que faz exatamente isso: soma um campo num√©rico de cada item da lista.
 *
 *
 * üîπ listaProdutos
 * ‚Üí √â uma lista que cont√©m objetos (provavelmente do tipo Produto, por exemplo).
 * Cada objeto tem propriedades, como nome e preco.
 *
 * üîπ .sumOf { it.preco }
 * ‚Üí Este √© um m√©todo que percorre a lista (listaProdutos) e soma o valor de preco de cada item.
 * ‚Üí A palavra it representa cada item individual da lista durante o loop.
 *
 * L√™-se como:
 * "Some o valor do campo preco de cada item da lista."
 *
 * üîπ return
 * ‚Üí Significa que o valor total da soma ser√° retornado pelo m√©todo calcularCompras().
 *
 * sumOf n√£o √© um Iterable ‚Äî ele √© um m√©todo de extens√£o usado em cole√ß√µes como
 * List, Set, Array, etc., ou seja, em tipos que implementam Iterable.
 */
